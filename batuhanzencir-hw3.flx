%{
#include "batuhanzencir-hw3.h"
#include "batuhanzencir-hw3.tab.h"
int numberOfLines = 1;
int blockCounter =0;
int nested =0;
int insideBlock =0;
int p;

%}

tNEWLINE \n

tLOCALPART [A-Za-z0-9\-_]+(([A-Za-z0-9\-_]*|\.?)[A-Za-z0-9\-_])*
tDOMAIN [A-Za-z0-9]+[A-Za-z0-9\-]*[A-Za-z0-9]+|[A-Za-z0-9]{1}

/* Comments */
tSLC  "//" 
tOMLC "/\*" 
tCMLC "*/"   


%x singleLineComment multiLineComment
%%
{tSLC}  BEGIN(singleLineComment);
<singleLineComment>{tNEWLINE} numberOfLines++;   {BEGIN(INITIAL);}
<singleLineComment>.    ;


{tOMLC} {BEGIN(multiLineComment); ++nested;}
<multiLineComment>{tCMLC}      { if (--nested == 0) BEGIN(INITIAL); }
<multiLineComment>{tOMLC}     ++nested;
<multiLineComment>{tNEWLINE}   numberOfLines++; {} ;
<multiLineComment>.  ;
[ \t]+

{tNEWLINE}    {numberOfLines = numberOfLines+1;}

"Mail" { 
insideBlock =1;
blockCounter +=1;
return tMAIL;
}
"end"[ \t\n\r\f]+"Mail" {p =0;
    while( p<yyleng ){
    if (yytext[p] == '\n') {
        numberOfLines++;
        
    }
    p++;
    }
     insideBlock =0; return tENDMAIL;}
    
"schedule" {  return tSCHEDULE; }
"end"[ \t\n\r\f]+"schedule" {  p =0;
    while( p<yyleng ){
    if (yytext[p] == '\n') {
        numberOfLines++;
        
    }
    p++;
    }
    return tENDSCHEDULE;}

"send" return  tSEND;
"set" { return tSET;}
"to" return tTO;
"from" return tFROM;
@ return tAT;
, return tCOMMA;
: return tCOLON;
\( return tLPR;
\) return tRPR;
\[ return tLBR;
\] return tRBR;
[a-zA-Z\_]+[a-zA-Z0-9\_]* {
    yylval.identNode.lineNum = numberOfLines;
    
    char *result = (char *)malloc(strlen(yytext) + 1);    
    strcpy(result,yytext);
    yylval.identNode.name = result;
    yylval.identNode.blockCounter = blockCounter;
    yylval.identNode.lineNum = numberOfLines;
    yylval.identNode.insideBlock = insideBlock;
    return tIDENT;}
["][^\"]*["] {
    p =0;
    while( p<yyleng ){
    if (yytext[p] == '\n') {
        numberOfLines++;
        
    }
    p++;
    }
    yylval.stringNode.lineNum = numberOfLines;
    
    char *result = (char *)malloc(strlen(yytext) + 1);
    strcpy(result,yytext);
    yylval.stringNode.value = result;

    return tSTRING;}

[0-9]{2}"/"[0-9]{2}"/"[0-9]{4}|[0-9]{2}\.[0-9]{2}\.[0-9]{4}|[0-9]{2}-[0-9]{2}-[0-9]{4} {
    yylval.normalNode.lineNum = numberOfLines;

    char *result = (char *)malloc(strlen(yytext) + 1);
    strcpy(result,yytext);
    yylval.normalNode.value = result;

    return tDATE;}

[0-9]{2}:[0-9]{2} {
    yylval.normalNode.lineNum = numberOfLines;

    char *result = (char *)malloc(strlen(yytext) + 1);
    strcpy(result,yytext);
    yylval.normalNode.value = result;

    return tTIME;}

{tLOCALPART}"@"({tDOMAIN}"."{tDOMAIN}"."{tDOMAIN}|{tDOMAIN}"."{tDOMAIN}) {
    yylval.normalNode.lineNum = numberOfLines;

    char *result = (char *)malloc(strlen(yytext) + 1);
    strcpy(result,yytext);
    yylval.normalNode.value = result;
    yylval.normalNode.lineNum = numberOfLines;
    return tADDRESS;}



.	    return yytext[0];
%%